{
	"info": {
		"_postman_id": "bb0e46c8-4f3e-4ffd-bed4-5684c7202490",
		"name": "BACKEND-API",
		"description": "# üöÄ Get started here\n\nThis collection guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this collection**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT and PATCH requests.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36341525",
		"_collection_link": "https://freelance-7629.postman.co/workspace/Quick-Forms-Backend-Api~2aa91dca-7a9b-4ebe-9ffa-354049d66143/collection/36341525-bb0e46c8-4f3e-4ffd-bed4-5684c7202490?action=share&source=collection_link&creator=36341525"
	},
	"item": [
		{
			"name": "PRODUCTION",
			"item": [
				{
					"name": "USERS",
					"item": [
						{
							"name": "Login User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admingab@gmail.com\",\r\n    \"password\": \"!Gabz092501\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/login",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login User For Deleting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"gaabsyy25@gmail.com\",\r\n    \"password\": \"!Gabz092501\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/login",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/logout",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get All Users Deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/v1/users/deleted",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"v1",
										"users",
										"deleted"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "668a1e61b2e8afdcabae5297"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "admingab",
											"type": "text"
										},
										{
											"key": "email",
											"value": "admingab@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "!Gabz092501",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Admin",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Admin For Deleting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "gaabsyy25",
											"type": "text"
										},
										{
											"key": "email",
											"value": "gaabsyy25@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "!Gabz092501",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Admin",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "customergab",
											"type": "text"
										},
										{
											"key": "email",
											"value": "customergab@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "!Gabz092501",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Customer",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "gaabsyy25",
											"type": "text"
										},
										{
											"key": "email",
											"value": "gaabsyy25@gmail.com",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Customer",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/edit/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669b26504c9b5a60c1bd9190"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Change User Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"!Gabz092501\",\n  \"confirmPassword\": \"!Gabz092501\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/changePassword/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"changePassword",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669b26504c9b5a60c1bd9190"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669d1ea68425f1642796275f"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Restore User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/restore/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"restore",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669d1ea68425f1642796275f"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Force Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/forceDelete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"forceDelete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a102a42cd69100e808873e"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Forgot User Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"gaabsyy25@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/emailOTP",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"emailOTP"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset User Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"verificationCode\": \"042101\",\r\n    \"newPassword\": \"!Gabz092501\",\r\n    \"confirmPassword\": \"!Gabz092501\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/users/resetPassword",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"users",
										"resetPassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INPUT_TYPES",
					"item": [
						{
							"name": "Get All Input Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/inputTypes",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"inputTypes"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/inputTypes/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"inputTypes",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"email\",\r\n    \"fieldName\": \"email\",\r\n    \"category\": \"General\",\r\n    \"icon\": \"icon\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/inputTypes",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"inputTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"text\",\r\n    \"name\": \"firstName\",\r\n    \"category\": \"General\",\r\n    \"icon\": \"icon\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/inputTypes/edit/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"inputTypes",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/inputTypes/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"inputTypes",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "CONTENTS",
					"item": [
						{
							"name": "Get All Contents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/contents",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"contents"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/contents/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"contents",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/contents",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"contents"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Lorem Ipsum\",\r\n  \"fields\": [\r\n    {\r\n      \"inputType\": \"text\",\r\n      \"fieldName\": \"fname\",\r\n      \"placeholderText\": \"John\",\r\n      \"isRequiredField\": true,\r\n      \"requiredFieldColor\": \"#FF0000\",\r\n      \"requiredFieldText\": \"Fname is required\",\r\n      \"style\": {\r\n        \"placeholderColor\": \"#100000\"\r\n      }\r\n    },\r\n    {\r\n      \"inputType\": \"text\",\r\n      \"fieldName\": \"lname\",\r\n      \"placeholderText\": \"Doe\",\r\n      \"isRequiredField\": true,\r\n      \"requiredFieldColor\": \"#FF0000\",      \r\n      \"requiredFieldText\": \"Lname is required\",\r\n      \"style\": {\r\n        \"placeholderColor\": \"#100000\"\r\n      }\r\n    },\r\n    {\r\n      \"inputType\": \"email\",\r\n      \"fieldName\": \"email\",\r\n      \"placeholderText\": \"johndoe@gmail.com\",\r\n      \"isRequiredField\": true,\r\n      \"requiredFieldColor\": \"#FF0000\",      \r\n      \"requiredFieldText\": \"Email is required\",\r\n      \"style\": {\r\n        \"placeholderColor\": \"#100000\"\r\n      }\r\n    },\r\n    {\r\n      \"inputType\": \"column\",\r\n      \"columns\": [\r\n        { \"inputType\": \"text\",\r\n          \"fieldName\": \"phone\",\r\n          \"placeholderText\": \"+63123456789\",\r\n          \"isRequiredField\": true,\r\n          \"requiredFieldColor\": \"#FF0000\",\r\n          \"requiredFieldText\": \"Phone is required\",\r\n      \"style\": {\r\n          \"placeholderColor\": \"#100000\"\r\n         }\r\n        },\r\n        { \"inputType\": \"radio\",\r\n          \"fieldName\": \"gender\",\r\n          \"placeholderText\": \"Male\",\r\n          \"isRequiredField\": true,\r\n          \"requiredFieldColor\": \"#FF0000\",\r\n          \"requiredFieldText\": \"Gender is required\",\r\n      \"style\": {\r\n          \"placeholderColor\": \"#100000\"\r\n         }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/contents/edit/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"contents",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a105f1488f6169f9a55286"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Edit All Field Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"placeholderText\": \"New Placeholder Text\",\r\n  \"isRequiredField\": true,\r\n  \"requiredFieldColor\": \"#00FF00\",\r\n  \"requiredFieldText\": \"New RequiredField Text\",\r\n  \"style\": {\r\n        \"placeholderColor\": \"#200000\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/contents/editAllFields/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"contents",
										"editAllFields",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a105f1488f6169f9a55286"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/contents/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"contents",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669fafe450afd0d619df070e"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "IMAGES",
					"item": [
						{
							"name": "Get All Images",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669b202c4c9b5a60c1bd910b"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef411bc-d509-4ef0-8eed-62a3ff2c9420"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Default Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef411bc-d509-4ef0-8eed-62a3ff2c9420"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images/createDefault",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images",
										"createDefault"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef411bc-d509-4ef0-8eed-62a3ff2c9420"
										}
									]
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images/edit/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "668939d89108596370d7e817"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6697b9df43d94cd7f66557c6"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Remove Default Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentId\": \"669e025a35c55088213656ec\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/images/removeDefault/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"images",
										"removeDefault",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669e00f635c5508821365689"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "DESIGNS",
					"item": [
						{
							"name": "Get All Designs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/designs",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"designs"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/designs/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"designs",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6699e228874c34da527ad858"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentId\": \"66a105f1488f6169f9a55286\",\r\n    \"imageId\": \"669e00f635c5508821365689\",\r\n    \"position\": \"center\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/designs",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"designs"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Delete Design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/designs/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"designs",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669dc89907d4b793df5419a5"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "SETTINGS",
					"item": [
						{
							"name": "Get All Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/settings",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"settings"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/settings/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"settings",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentId\": \"66a105f1488f6169f9a55286\",\r\n    \"isEmailParticipant\": false,\r\n    \"isEmailAdmin\": false,\r\n    \"isRecord\": true,\r\n    \"isSuccess\": false,\r\n    \"subject\": \"test email\",\r\n    \"message\" : \"Hi there [fname] [lname] on [date] at [time] your email [email]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/settings",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"settings"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isEmailParticipant\": true,\r\n    \"isEmailAdmin\": true,\r\n    \"isRecord\": true,\r\n    \"isSuccess\": true,\r\n    \"subject\": \"test email\",\r\n    \"message\" : \"Hi there [fname] [lname] on [date] at [time] your email [email]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/settings/edit/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"settings",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6697e54fa82e8065d430be47"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "FORMS",
					"item": [
						{
							"name": "Get All Forms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/forms",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"forms"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/forms/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"forms",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6699e1b8a50dbc8cd59a6162"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Delete Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/forms/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"forms",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a0fdaef2370ea0fe50e88c"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "LINKS",
					"item": [
						{
							"name": "Get All Links",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/links",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"links"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"66a11f9f88f65f1727422837\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/links",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"links"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Delete Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/links/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"links",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a1e6ba785a8d4829b28b01"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "PUBLISH",
					"item": [
						{
							"name": "Redirect Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/?url=ice-1lbn-luc",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "ice-1lbn-luc"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "SUBMISSIONS",
					"item": [
						{
							"name": "Get All Submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/submissions",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"submissions"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/submissions/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"submissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669fadd3140db02183dd3577"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"669e00e935c5508821365671\": \"Johnny\",\r\n    \"669e00e935c5508821365672\": \"Doe\",\r\n    \"669e00e935c5508821365674\": \"123-456-7890\",\r\n    \"669e00e935c5508821365675\": \"male\",\r\n    \"669e00e935c5508821365676\": \"robinhood@example.com\",\r\n    \"669e00e935c5508821365678\": \"123 Main St\",\r\n    \"669e00e935c5508821365679\": \"Springfield\",\r\n    \"669e00e935c550882136567a\": [\"short\",\"slim\",\"blonde\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/submissions/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"submissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669e025a35c55088213656ec"
										}
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Submission Link With Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"66b02a60ffed46d391174eb9\": \"Gab\",\r\n    \"66b02a60ffed46d391174eba\": \"Gab\",\r\n    \"66b02a60ffed46d391174ebb\": \"gaabsyy25@gmail.com\",\r\n    \"66b02a60ffed46d391174ebd\": \"123-456-7890\",\r\n    \"66b02a60ffed46d391174ebe\": \"male\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/submissions/66b029beffed46d391174eae",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"submissions",
										"66b029beffed46d391174eae"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Submission Link Without Email Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"66b02e74db382ac927ca2375\": \"Gab\",\r\n    \"66b02e74db382ac927ca2376\": \"Gab\",\r\n    \"66b02e74db382ac927ca2378\": \"123-456-7890\",\r\n    \"66b02e74db382ac927ca2379\": \"male\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/submissions/66b02e5cdb382ac927ca236c",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"submissions",
										"66b02e5cdb382ac927ca236c"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Delete Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://quickforms-backend.onrender.com/api/v1/submissions/delete/:id",
									"protocol": "https",
									"host": [
										"quickforms-backend",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"submissions",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669dbff9a033ebbc0f531c30"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LOCALHOST",
			"item": [
				{
					"name": "USERS",
					"item": [
						{
							"name": "Login User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admingab@gmail.com\",\r\n    \"password\": \"!Gabz092501\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login User For Deleting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"gaabsyy25@gmail.com\",\r\n    \"password\": \"!Gabz092501\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/logout",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get All Users Deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/users/deleted",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"deleted"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/users/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "668a1e61b2e8afdcabae5297"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "admingab",
											"type": "text"
										},
										{
											"key": "email",
											"value": "admingab@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "!Gabz092501",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Admin",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Admin For Deleting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "gaabsyy25",
											"type": "text"
										},
										{
											"key": "email",
											"value": "gaabsyy25@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "!Gabz092501",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Admin",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "customergab",
											"type": "text"
										},
										{
											"key": "email",
											"value": "customergab@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "!Gabz092501",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Customer",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "gaabsyy25",
											"type": "text"
										},
										{
											"key": "email",
											"value": "gaabsyy25@gmail.com",
											"type": "text"
										},
										{
											"key": "role",
											"value": "Customer",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef3a7c0-d191-4cc0-b370-5416c4b9d45d"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/edit/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669b26504c9b5a60c1bd9190"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Change User Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"!Gabz092501\",\n  \"confirmPassword\": \"!Gabz092501\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/changePassword/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"changePassword",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669b26504c9b5a60c1bd9190"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669d1ea68425f1642796275f"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Restore User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/restore/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"restore",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669d1ea68425f1642796275f"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Force Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/forceDelete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"forceDelete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a102a42cd69100e808873e"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Forgot User Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"gaabsyy25@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/emailOTP",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"emailOTP"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset User Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"verificationCode\": \"777720\",\r\n    \"newPassword\": \"!Gabz092501\",\r\n    \"confirmPassword\": \"!Gabz092501\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/users/resetPassword",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"users",
										"resetPassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INPUT_TYPES",
					"item": [
						{
							"name": "Get All Input Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/inputTypes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"inputTypes"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/inputTypes/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"inputTypes",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"email\",\r\n    \"fieldName\": \"email\",\r\n    \"category\": \"General\",\r\n    \"icon\": \"icon\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/inputTypes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"inputTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"text\",\r\n    \"fieldName\": \"firstName\",\r\n    \"category\": \"General\",\r\n    \"icon\": \"icon\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/inputTypes/edit/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"inputTypes",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete Input Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/inputTypes/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"inputTypes",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "CONTENTS",
					"item": [
						{
							"name": "Get All Contents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/contents",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"contents"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/contents/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"contents",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66af6bd1fa440e73ce2861ce"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/contents",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"contents"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Lorem Ipsum\",\r\n  \"fields\": [\r\n    {\r\n      \"inputType\": \"text\",\r\n      \"fieldName\": \"fname\",\r\n      \"placeholderText\": \"John\",\r\n      \"isRequiredField\": true,\r\n      \"requiredFieldColor\": \"#FF0000\",\r\n      \"requiredFieldText\": \"Fname is required\",\r\n      \"style\": {\r\n        \"placeholderColor\": \"#100000\"\r\n      }\r\n    },\r\n    {\r\n      \"inputType\": \"text\",\r\n      \"fieldName\": \"lname\",\r\n      \"placeholderText\": \"Doe\",\r\n      \"isRequiredField\": true,\r\n      \"requiredFieldColor\": \"#FF0000\",      \r\n      \"requiredFieldText\": \"Lname is required\",\r\n      \"style\": {\r\n        \"placeholderColor\": \"#100000\"\r\n      }\r\n    },\r\n    {\r\n      \"inputType\": \"email\",\r\n      \"fieldName\": \"email\",\r\n      \"placeholderText\": \"johndoe@gmail.com\",\r\n      \"isRequiredField\": true,\r\n      \"requiredFieldColor\": \"#FF0000\",      \r\n      \"requiredFieldText\": \"Email is required\",\r\n      \"style\": {\r\n        \"placeholderColor\": \"#100000\"\r\n      }\r\n    },\r\n    {\r\n      \"inputType\": \"column\",\r\n      \"columns\": [\r\n        { \"inputType\": \"text\",\r\n          \"fieldName\": \"phone\",\r\n          \"placeholderText\": \"+63123456789\",\r\n          \"isRequiredField\": true,\r\n          \"requiredFieldColor\": \"#FF0000\",\r\n          \"requiredFieldText\": \"Phone is required\",\r\n      \"style\": {\r\n          \"placeholderColor\": \"#100000\"\r\n         }\r\n        },\r\n        { \"inputType\": \"radio\",\r\n          \"fieldName\": \"gender\",\r\n          \"placeholderText\": \"Male\",\r\n          \"isRequiredField\": true,\r\n          \"requiredFieldColor\": \"#FF0000\",\r\n          \"requiredFieldText\": \"Gender is required\",\r\n      \"style\": {\r\n          \"placeholderColor\": \"#100000\"\r\n         }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/contents/edit/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"contents",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66b02e5cdb382ac927ca236c"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Edit All Field Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"placeholderText\": \"New Placeholder Text\",\r\n  \"isRequiredField\": true,\r\n  \"requiredFieldColor\": \"#00FF00\",\r\n  \"requiredFieldText\": \"New RequiredField Text\",\r\n  \"style\": {\r\n        \"placeholderColor\": \"#200000\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/contents/editAllFields/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"contents",
										"editAllFields",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66af6bd1fa440e73ce2861ce"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/contents/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"contents",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669fafe450afd0d619df070e"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "IMAGES",
					"item": [
						{
							"name": "Get All Images",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/images",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/images/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669b202c4c9b5a60c1bd910b"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef411bc-d509-4ef0-8eed-62a3ff2c9420"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/images",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Default Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef411bc-d509-4ef0-8eed-62a3ff2c9420"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/images/createDefault",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images",
										"createDefault"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1ef411bc-d509-4ef0-8eed-62a3ff2c9420"
										}
									]
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/images/edit/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "668939d89108596370d7e817"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Delete Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/images/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6697b9df43d94cd7f66557c6"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Remove Default Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentId\": \"669e025a35c55088213656ec\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/images/removeDefault/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"images",
										"removeDefault",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669e00f635c5508821365689"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "DESIGNS",
					"item": [
						{
							"name": "Get All Designs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/designs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"designs"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/designs/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"designs",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6699e228874c34da527ad858"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentId\": \"66b02e5cdb382ac927ca236c\",\r\n    \"imageId\": \"66b0262a173d52f741cd59bf\",\r\n    \"position\": \"center\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/designs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"designs"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Delete Design",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/designs/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"designs",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669dc89907d4b793df5419a5"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "SETTINGS",
					"item": [
						{
							"name": "Get All Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/settings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"settings"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/settings/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"settings",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6688f837c9535f5865a3bece"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentId\": \"66b02e5cdb382ac927ca236c\",\r\n    \"isEmailParticipant\": true,\r\n    \"isEmailAdmin\": true,\r\n    \"isRecord\": true,\r\n    \"isSuccess\": false,\r\n    \"subject\": \"test email\",\r\n    \"message\" : \"Hi there [fname] [lname] on [date] at [time] your email [email]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/settings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"settings"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Edit Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isEmailParticipant\": true,\r\n    \"isEmailAdmin\": true,\r\n    \"isRecord\": true,\r\n    \"isSuccess\": false,\r\n    \"subject\": \"test email\",\r\n    \"message\" : \"Hi there [fname] [lname] on [date] at [time] your email [email]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/settings/edit/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"settings",
										"edit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66b02ab1ffed46d391174ece"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "FORMS",
					"item": [
						{
							"name": "Get All Forms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/forms",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"forms"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/forms/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"forms",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6699e1b8a50dbc8cd59a6162"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Delete Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/forms/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"forms",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a0fdaef2370ea0fe50e88c"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "LINKS",
					"item": [
						{
							"name": "Get All Links",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/links",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"links"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"66b02e5cdb382ac927ca236c\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/links",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"links"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Delete Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/links/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"links",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "66a1e6ba785a8d4829b28b01"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "PUBLISH",
					"item": [
						{
							"name": "Redirect Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/?url=lvv-rjqj-r9a",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "lvv-rjqj-r9a"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "SUBMISSIONS",
					"item": [
						{
							"name": "Get All Submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/submissions",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"submissions"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get Single Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:4000/api/v1/submissions/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"submissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669fadd3140db02183dd3577"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Create Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"669e00e935c5508821365671\": \"Johnny\",\r\n    \"669e00e935c5508821365672\": \"Doe\",\r\n    \"669e00e935c5508821365674\": \"123-456-7890\",\r\n    \"669e00e935c5508821365675\": \"male\",\r\n    \"669e00e935c5508821365676\": \"robinhood@example.com\",\r\n    \"669e00e935c5508821365678\": \"123 Main St\",\r\n    \"669e00e935c5508821365679\": \"Springfield\",\r\n    \"669e00e935c550882136567a\": [\"short\",\"slim\",\"blonde\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/submissions/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"submissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669e025a35c55088213656ec"
										}
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Submission Link With Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"66b02a60ffed46d391174eb9\": \"Gab\",\r\n    \"66b02a60ffed46d391174eba\": \"Gab\",\r\n    \"66b02a60ffed46d391174ebb\": \"gaabsyy25@gmail.com\",\r\n    \"66b02a60ffed46d391174ebd\": \"123-456-7890\",\r\n    \"66b02a60ffed46d391174ebe\": \"male\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/submissions/66b029beffed46d391174eae",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"submissions",
										"66b029beffed46d391174eae"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Create Submission Link Without Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"66b02e74db382ac927ca2375\": \"Gab\",\r\n    \"66b02e74db382ac927ca2376\": \"Gab\",\r\n    \"66b02e74db382ac927ca2378\": \"123-456-7890\",\r\n    \"66b02e74db382ac927ca2379\": \"male\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/submissions/66b02e5cdb382ac927ca236c",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"submissions",
										"66b02e5cdb382ac927ca236c"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Delete Submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Bearer}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:4000/api/v1/submissions/delete/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4000",
									"path": [
										"api",
										"v1",
										"submissions",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "669dbff9a033ebbc0f531c30"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Bearer",
			"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2YWYxZDBkMDFiZDlmMjNjNGM4OGFhYSIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTcyMjgyMzg3MCwiZXhwIjoxNzIyOTEwMjcwfQ.uohcDP16nhkX0dqqJs4Wf4pUwN83gOdKUd9A-WMSF5E"
		}
	]
}